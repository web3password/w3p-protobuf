// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: user_data_index.proto

package user_data_index

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserDataIndex_GetPrimaryAddrIndexList_FullMethodName   = "/user_data_index.UserDataIndex/GetPrimaryAddrIndexList"
	UserDataIndex_GetPrimaryAddrIndexDetail_FullMethodName = "/user_data_index.UserDataIndex/GetPrimaryAddrIndexDetail"
	UserDataIndex_GetLatestBlock_FullMethodName            = "/user_data_index.UserDataIndex/GetLatestBlock"
	UserDataIndex_AddOrDelCredential_FullMethodName        = "/user_data_index.UserDataIndex/AddOrDelCredential"
	UserDataIndex_BatchAddCredential_FullMethodName        = "/user_data_index.UserDataIndex/BatchAddCredential"
	UserDataIndex_BatchDeleteCredential_FullMethodName     = "/user_data_index.UserDataIndex/BatchDeleteCredential"
	UserDataIndex_DelPrimaryAddrIndex_FullMethodName       = "/user_data_index.UserDataIndex/DelPrimaryAddrIndex"
	UserDataIndex_GetAllCredentialTimestamp_FullMethodName = "/user_data_index.UserDataIndex/GetAllCredentialTimestamp"
	UserDataIndex_GetCredentialList_FullMethodName         = "/user_data_index.UserDataIndex/GetCredentialList"
	UserDataIndex_CheckTx_FullMethodName                   = "/user_data_index.UserDataIndex/CheckTx"
	UserDataIndex_BatchCheckTx_FullMethodName              = "/user_data_index.UserDataIndex/BatchCheckTx"
)

// UserDataIndexClient is the client API for UserDataIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDataIndexClient interface {
	// 根据主地址获取索引ID列表
	GetPrimaryAddrIndexList(ctx context.Context, in *GetPrimaryAddrIndexListRequest, opts ...grpc.CallOption) (*GetPrimaryAddrIndexListResponse, error)
	// 根据主地址+索引ID获取索引详情
	GetPrimaryAddrIndexDetail(ctx context.Context, in *GetPrimaryAddrIndexDetailRequest, opts ...grpc.CallOption) (*GetPrimaryAddrIndexDetailResponse, error)
	// 获取最新区块信息
	GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error)
	// 新增/更新/删除区块数据
	AddOrDelCredential(ctx context.Context, in *AddOrDelCredentialRequest, opts ...grpc.CallOption) (*AddOrDelCredentialResponse, error)
	// 批量-新增/更新密码数据
	BatchAddCredential(ctx context.Context, in *BatchAddCredentialRequest, opts ...grpc.CallOption) (*BatchAddCredentialResponse, error)
	// 批量-删除密码数据
	BatchDeleteCredential(ctx context.Context, in *BatchDeleteCredentialRequest, opts ...grpc.CallOption) (*BatchDeleteCredentialResponse, error)
	// 删除主地址对应索引所有数据=销号
	DelPrimaryAddrIndex(ctx context.Context, in *DelPrimaryAddrIndexRequest, opts ...grpc.CallOption) (*DelPrimaryAddrIndexResponse, error)
	// 获取当前所有有效数据的时间戳
	GetAllCredentialTimestamp(ctx context.Context, in *GetAllCredentialTimestampRequest, opts ...grpc.CallOption) (*GetAllCredentialTimestampResponse, error)
	// 获取所有索引数据
	GetCredentialList(ctx context.Context, in *GetCredentialListRequest, opts ...grpc.CallOption) (*GetCredentialListResponse, error)
	// 获取指定tx hash
	CheckTx(ctx context.Context, in *CheckTxRequest, opts ...grpc.CallOption) (*CheckTxResponse, error)
	// 批量-查询 tx_hash 是否完成
	BatchCheckTx(ctx context.Context, in *BatchCheckTxRequest, opts ...grpc.CallOption) (*BatchCheckTxResponse, error)
}

type userDataIndexClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDataIndexClient(cc grpc.ClientConnInterface) UserDataIndexClient {
	return &userDataIndexClient{cc}
}

func (c *userDataIndexClient) GetPrimaryAddrIndexList(ctx context.Context, in *GetPrimaryAddrIndexListRequest, opts ...grpc.CallOption) (*GetPrimaryAddrIndexListResponse, error) {
	out := new(GetPrimaryAddrIndexListResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_GetPrimaryAddrIndexList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) GetPrimaryAddrIndexDetail(ctx context.Context, in *GetPrimaryAddrIndexDetailRequest, opts ...grpc.CallOption) (*GetPrimaryAddrIndexDetailResponse, error) {
	out := new(GetPrimaryAddrIndexDetailResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_GetPrimaryAddrIndexDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error) {
	out := new(GetLatestBlockResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_GetLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) AddOrDelCredential(ctx context.Context, in *AddOrDelCredentialRequest, opts ...grpc.CallOption) (*AddOrDelCredentialResponse, error) {
	out := new(AddOrDelCredentialResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_AddOrDelCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) BatchAddCredential(ctx context.Context, in *BatchAddCredentialRequest, opts ...grpc.CallOption) (*BatchAddCredentialResponse, error) {
	out := new(BatchAddCredentialResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_BatchAddCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) BatchDeleteCredential(ctx context.Context, in *BatchDeleteCredentialRequest, opts ...grpc.CallOption) (*BatchDeleteCredentialResponse, error) {
	out := new(BatchDeleteCredentialResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_BatchDeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) DelPrimaryAddrIndex(ctx context.Context, in *DelPrimaryAddrIndexRequest, opts ...grpc.CallOption) (*DelPrimaryAddrIndexResponse, error) {
	out := new(DelPrimaryAddrIndexResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_DelPrimaryAddrIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) GetAllCredentialTimestamp(ctx context.Context, in *GetAllCredentialTimestampRequest, opts ...grpc.CallOption) (*GetAllCredentialTimestampResponse, error) {
	out := new(GetAllCredentialTimestampResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_GetAllCredentialTimestamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) GetCredentialList(ctx context.Context, in *GetCredentialListRequest, opts ...grpc.CallOption) (*GetCredentialListResponse, error) {
	out := new(GetCredentialListResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_GetCredentialList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) CheckTx(ctx context.Context, in *CheckTxRequest, opts ...grpc.CallOption) (*CheckTxResponse, error) {
	out := new(CheckTxResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_CheckTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDataIndexClient) BatchCheckTx(ctx context.Context, in *BatchCheckTxRequest, opts ...grpc.CallOption) (*BatchCheckTxResponse, error) {
	out := new(BatchCheckTxResponse)
	err := c.cc.Invoke(ctx, UserDataIndex_BatchCheckTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDataIndexServer is the server API for UserDataIndex service.
// All implementations must embed UnimplementedUserDataIndexServer
// for forward compatibility
type UserDataIndexServer interface {
	// 根据主地址获取索引ID列表
	GetPrimaryAddrIndexList(context.Context, *GetPrimaryAddrIndexListRequest) (*GetPrimaryAddrIndexListResponse, error)
	// 根据主地址+索引ID获取索引详情
	GetPrimaryAddrIndexDetail(context.Context, *GetPrimaryAddrIndexDetailRequest) (*GetPrimaryAddrIndexDetailResponse, error)
	// 获取最新区块信息
	GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error)
	// 新增/更新/删除区块数据
	AddOrDelCredential(context.Context, *AddOrDelCredentialRequest) (*AddOrDelCredentialResponse, error)
	// 批量-新增/更新密码数据
	BatchAddCredential(context.Context, *BatchAddCredentialRequest) (*BatchAddCredentialResponse, error)
	// 批量-删除密码数据
	BatchDeleteCredential(context.Context, *BatchDeleteCredentialRequest) (*BatchDeleteCredentialResponse, error)
	// 删除主地址对应索引所有数据=销号
	DelPrimaryAddrIndex(context.Context, *DelPrimaryAddrIndexRequest) (*DelPrimaryAddrIndexResponse, error)
	// 获取当前所有有效数据的时间戳
	GetAllCredentialTimestamp(context.Context, *GetAllCredentialTimestampRequest) (*GetAllCredentialTimestampResponse, error)
	// 获取所有索引数据
	GetCredentialList(context.Context, *GetCredentialListRequest) (*GetCredentialListResponse, error)
	// 获取指定tx hash
	CheckTx(context.Context, *CheckTxRequest) (*CheckTxResponse, error)
	// 批量-查询 tx_hash 是否完成
	BatchCheckTx(context.Context, *BatchCheckTxRequest) (*BatchCheckTxResponse, error)
	mustEmbedUnimplementedUserDataIndexServer()
}

// UnimplementedUserDataIndexServer must be embedded to have forward compatible implementations.
type UnimplementedUserDataIndexServer struct {
}

func (UnimplementedUserDataIndexServer) GetPrimaryAddrIndexList(context.Context, *GetPrimaryAddrIndexListRequest) (*GetPrimaryAddrIndexListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrimaryAddrIndexList not implemented")
}
func (UnimplementedUserDataIndexServer) GetPrimaryAddrIndexDetail(context.Context, *GetPrimaryAddrIndexDetailRequest) (*GetPrimaryAddrIndexDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrimaryAddrIndexDetail not implemented")
}
func (UnimplementedUserDataIndexServer) GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedUserDataIndexServer) AddOrDelCredential(context.Context, *AddOrDelCredentialRequest) (*AddOrDelCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrDelCredential not implemented")
}
func (UnimplementedUserDataIndexServer) BatchAddCredential(context.Context, *BatchAddCredentialRequest) (*BatchAddCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddCredential not implemented")
}
func (UnimplementedUserDataIndexServer) BatchDeleteCredential(context.Context, *BatchDeleteCredentialRequest) (*BatchDeleteCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteCredential not implemented")
}
func (UnimplementedUserDataIndexServer) DelPrimaryAddrIndex(context.Context, *DelPrimaryAddrIndexRequest) (*DelPrimaryAddrIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPrimaryAddrIndex not implemented")
}
func (UnimplementedUserDataIndexServer) GetAllCredentialTimestamp(context.Context, *GetAllCredentialTimestampRequest) (*GetAllCredentialTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCredentialTimestamp not implemented")
}
func (UnimplementedUserDataIndexServer) GetCredentialList(context.Context, *GetCredentialListRequest) (*GetCredentialListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialList not implemented")
}
func (UnimplementedUserDataIndexServer) CheckTx(context.Context, *CheckTxRequest) (*CheckTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTx not implemented")
}
func (UnimplementedUserDataIndexServer) BatchCheckTx(context.Context, *BatchCheckTxRequest) (*BatchCheckTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckTx not implemented")
}
func (UnimplementedUserDataIndexServer) mustEmbedUnimplementedUserDataIndexServer() {}

// UnsafeUserDataIndexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDataIndexServer will
// result in compilation errors.
type UnsafeUserDataIndexServer interface {
	mustEmbedUnimplementedUserDataIndexServer()
}

func RegisterUserDataIndexServer(s grpc.ServiceRegistrar, srv UserDataIndexServer) {
	s.RegisterService(&UserDataIndex_ServiceDesc, srv)
}

func _UserDataIndex_GetPrimaryAddrIndexList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrimaryAddrIndexListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).GetPrimaryAddrIndexList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_GetPrimaryAddrIndexList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).GetPrimaryAddrIndexList(ctx, req.(*GetPrimaryAddrIndexListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_GetPrimaryAddrIndexDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrimaryAddrIndexDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).GetPrimaryAddrIndexDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_GetPrimaryAddrIndexDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).GetPrimaryAddrIndexDetail(ctx, req.(*GetPrimaryAddrIndexDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).GetLatestBlock(ctx, req.(*GetLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_AddOrDelCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrDelCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).AddOrDelCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_AddOrDelCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).AddOrDelCredential(ctx, req.(*AddOrDelCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_BatchAddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).BatchAddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_BatchAddCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).BatchAddCredential(ctx, req.(*BatchAddCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_BatchDeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).BatchDeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_BatchDeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).BatchDeleteCredential(ctx, req.(*BatchDeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_DelPrimaryAddrIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPrimaryAddrIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).DelPrimaryAddrIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_DelPrimaryAddrIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).DelPrimaryAddrIndex(ctx, req.(*DelPrimaryAddrIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_GetAllCredentialTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCredentialTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).GetAllCredentialTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_GetAllCredentialTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).GetAllCredentialTimestamp(ctx, req.(*GetAllCredentialTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_GetCredentialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).GetCredentialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_GetCredentialList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).GetCredentialList(ctx, req.(*GetCredentialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_CheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).CheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_CheckTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).CheckTx(ctx, req.(*CheckTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDataIndex_BatchCheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDataIndexServer).BatchCheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDataIndex_BatchCheckTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDataIndexServer).BatchCheckTx(ctx, req.(*BatchCheckTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDataIndex_ServiceDesc is the grpc.ServiceDesc for UserDataIndex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDataIndex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_data_index.UserDataIndex",
	HandlerType: (*UserDataIndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrimaryAddrIndexList",
			Handler:    _UserDataIndex_GetPrimaryAddrIndexList_Handler,
		},
		{
			MethodName: "GetPrimaryAddrIndexDetail",
			Handler:    _UserDataIndex_GetPrimaryAddrIndexDetail_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _UserDataIndex_GetLatestBlock_Handler,
		},
		{
			MethodName: "AddOrDelCredential",
			Handler:    _UserDataIndex_AddOrDelCredential_Handler,
		},
		{
			MethodName: "BatchAddCredential",
			Handler:    _UserDataIndex_BatchAddCredential_Handler,
		},
		{
			MethodName: "BatchDeleteCredential",
			Handler:    _UserDataIndex_BatchDeleteCredential_Handler,
		},
		{
			MethodName: "DelPrimaryAddrIndex",
			Handler:    _UserDataIndex_DelPrimaryAddrIndex_Handler,
		},
		{
			MethodName: "GetAllCredentialTimestamp",
			Handler:    _UserDataIndex_GetAllCredentialTimestamp_Handler,
		},
		{
			MethodName: "GetCredentialList",
			Handler:    _UserDataIndex_GetCredentialList_Handler,
		},
		{
			MethodName: "CheckTx",
			Handler:    _UserDataIndex_CheckTx_Handler,
		},
		{
			MethodName: "BatchCheckTx",
			Handler:    _UserDataIndex_BatchCheckTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_data_index.proto",
}
