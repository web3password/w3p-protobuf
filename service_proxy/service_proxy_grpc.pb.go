// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service_proxy.proto

package service_proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceProxy_Stream_FullMethodName = "/service_proxy.ServiceProxy/Stream"
)

// ServiceProxyClient is the client API for ServiceProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProxyClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ServiceProxy_StreamClient, error)
}

type serviceProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProxyClient(cc grpc.ClientConnInterface) ServiceProxyClient {
	return &serviceProxyClient{cc}
}

func (c *serviceProxyClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ServiceProxy_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceProxy_ServiceDesc.Streams[0], ServiceProxy_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceProxyStreamClient{stream}
	return x, nil
}

type ServiceProxy_StreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type serviceProxyStreamClient struct {
	grpc.ClientStream
}

func (x *serviceProxyStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceProxyStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceProxyServer is the server API for ServiceProxy service.
// All implementations must embed UnimplementedServiceProxyServer
// for forward compatibility
type ServiceProxyServer interface {
	Stream(ServiceProxy_StreamServer) error
	mustEmbedUnimplementedServiceProxyServer()
}

// UnimplementedServiceProxyServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProxyServer struct {
}

func (UnimplementedServiceProxyServer) Stream(ServiceProxy_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedServiceProxyServer) mustEmbedUnimplementedServiceProxyServer() {}

// UnsafeServiceProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProxyServer will
// result in compilation errors.
type UnsafeServiceProxyServer interface {
	mustEmbedUnimplementedServiceProxyServer()
}

func RegisterServiceProxyServer(s grpc.ServiceRegistrar, srv ServiceProxyServer) {
	s.RegisterService(&ServiceProxy_ServiceDesc, srv)
}

func _ServiceProxy_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceProxyServer).Stream(&serviceProxyStreamServer{stream})
}

type ServiceProxy_StreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type serviceProxyStreamServer struct {
	grpc.ServerStream
}

func (x *serviceProxyStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceProxyStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceProxy_ServiceDesc is the grpc.ServiceDesc for ServiceProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_proxy.ServiceProxy",
	HandlerType: (*ServiceProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ServiceProxy_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service_proxy.proto",
}
