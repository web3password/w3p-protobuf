// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: thor.proto

package thor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Thor_Stream_FullMethodName             = "/thor.Thor/Stream"
	Thor_Register_FullMethodName           = "/thor.Thor/Register"
	Thor_AddMember_FullMethodName          = "/thor.Thor/AddMember"
	Thor_BatchImportMember_FullMethodName  = "/thor.Thor/BatchImportMember"
	Thor_UpdateMember_FullMethodName       = "/thor.Thor/UpdateMember"
	Thor_RemoveMember_FullMethodName       = "/thor.Thor/RemoveMember"
	Thor_TransferSuperAdmin_FullMethodName = "/thor.Thor/TransferSuperAdmin"
	Thor_GetMemberList_FullMethodName      = "/thor.Thor/GetMemberList"
	Thor_GetOrgInfo_FullMethodName         = "/thor.Thor/GetOrgInfo"
	Thor_UpdateOrgInfo_FullMethodName      = "/thor.Thor/UpdateOrgInfo"
	Thor_OperationHistory_FullMethodName   = "/thor.Thor/OperationHistory"
)

// ThorClient is the client API for Thor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThorClient interface {
	// Stream
	Stream(ctx context.Context, opts ...grpc.CallOption) (Thor_StreamClient, error)
	// User Register
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error)
	// AddMember
	AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberRsp, error)
	// BatchImportMember
	BatchImportMember(ctx context.Context, in *BatchImportMemberReq, opts ...grpc.CallOption) (*BatchImportMemberRsp, error)
	// UpdateMember
	UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberRsp, error)
	// RemoveMember
	RemoveMember(ctx context.Context, in *RemoveMemberReq, opts ...grpc.CallOption) (*RemoveMemberRsp, error)
	// TransferSuperAdmin
	TransferSuperAdmin(ctx context.Context, in *TransferSuperAdminReq, opts ...grpc.CallOption) (*TransferSuperAdminRsp, error)
	// GetMemberList
	GetMemberList(ctx context.Context, in *GetMemberListReq, opts ...grpc.CallOption) (*GetMemberListRsp, error)
	// GetOrgInfo
	GetOrgInfo(ctx context.Context, in *GetOrgInfoReq, opts ...grpc.CallOption) (Thor_GetOrgInfoClient, error)
	// UpdateOrgInfo
	UpdateOrgInfo(ctx context.Context, in *UpdateOrgInfoReq, opts ...grpc.CallOption) (*UpdateOrgInfoRsp, error)
	// OperationHistory
	OperationHistory(ctx context.Context, in *OperationHistoryReq, opts ...grpc.CallOption) (*OperationHistoryRsp, error)
}

type thorClient struct {
	cc grpc.ClientConnInterface
}

func NewThorClient(cc grpc.ClientConnInterface) ThorClient {
	return &thorClient{cc}
}

func (c *thorClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Thor_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Thor_ServiceDesc.Streams[0], Thor_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &thorStreamClient{stream}
	return x, nil
}

type Thor_StreamClient interface {
	Send(*StreamReq) error
	Recv() (*StreamRsp, error)
	grpc.ClientStream
}

type thorStreamClient struct {
	grpc.ClientStream
}

func (x *thorStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *thorStreamClient) Recv() (*StreamRsp, error) {
	m := new(StreamRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *thorClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error) {
	out := new(RegisterRsp)
	err := c.cc.Invoke(ctx, Thor_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) AddMember(ctx context.Context, in *AddMemberReq, opts ...grpc.CallOption) (*AddMemberRsp, error) {
	out := new(AddMemberRsp)
	err := c.cc.Invoke(ctx, Thor_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) BatchImportMember(ctx context.Context, in *BatchImportMemberReq, opts ...grpc.CallOption) (*BatchImportMemberRsp, error) {
	out := new(BatchImportMemberRsp)
	err := c.cc.Invoke(ctx, Thor_BatchImportMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) UpdateMember(ctx context.Context, in *UpdateMemberReq, opts ...grpc.CallOption) (*UpdateMemberRsp, error) {
	out := new(UpdateMemberRsp)
	err := c.cc.Invoke(ctx, Thor_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) RemoveMember(ctx context.Context, in *RemoveMemberReq, opts ...grpc.CallOption) (*RemoveMemberRsp, error) {
	out := new(RemoveMemberRsp)
	err := c.cc.Invoke(ctx, Thor_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) TransferSuperAdmin(ctx context.Context, in *TransferSuperAdminReq, opts ...grpc.CallOption) (*TransferSuperAdminRsp, error) {
	out := new(TransferSuperAdminRsp)
	err := c.cc.Invoke(ctx, Thor_TransferSuperAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) GetMemberList(ctx context.Context, in *GetMemberListReq, opts ...grpc.CallOption) (*GetMemberListRsp, error) {
	out := new(GetMemberListRsp)
	err := c.cc.Invoke(ctx, Thor_GetMemberList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) GetOrgInfo(ctx context.Context, in *GetOrgInfoReq, opts ...grpc.CallOption) (Thor_GetOrgInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Thor_ServiceDesc.Streams[1], Thor_GetOrgInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &thorGetOrgInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Thor_GetOrgInfoClient interface {
	Recv() (*GetOrgInfoRsp, error)
	grpc.ClientStream
}

type thorGetOrgInfoClient struct {
	grpc.ClientStream
}

func (x *thorGetOrgInfoClient) Recv() (*GetOrgInfoRsp, error) {
	m := new(GetOrgInfoRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *thorClient) UpdateOrgInfo(ctx context.Context, in *UpdateOrgInfoReq, opts ...grpc.CallOption) (*UpdateOrgInfoRsp, error) {
	out := new(UpdateOrgInfoRsp)
	err := c.cc.Invoke(ctx, Thor_UpdateOrgInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thorClient) OperationHistory(ctx context.Context, in *OperationHistoryReq, opts ...grpc.CallOption) (*OperationHistoryRsp, error) {
	out := new(OperationHistoryRsp)
	err := c.cc.Invoke(ctx, Thor_OperationHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThorServer is the server API for Thor service.
// All implementations must embed UnimplementedThorServer
// for forward compatibility
type ThorServer interface {
	// Stream
	Stream(Thor_StreamServer) error
	// User Register
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// AddMember
	AddMember(context.Context, *AddMemberReq) (*AddMemberRsp, error)
	// BatchImportMember
	BatchImportMember(context.Context, *BatchImportMemberReq) (*BatchImportMemberRsp, error)
	// UpdateMember
	UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberRsp, error)
	// RemoveMember
	RemoveMember(context.Context, *RemoveMemberReq) (*RemoveMemberRsp, error)
	// TransferSuperAdmin
	TransferSuperAdmin(context.Context, *TransferSuperAdminReq) (*TransferSuperAdminRsp, error)
	// GetMemberList
	GetMemberList(context.Context, *GetMemberListReq) (*GetMemberListRsp, error)
	// GetOrgInfo
	GetOrgInfo(*GetOrgInfoReq, Thor_GetOrgInfoServer) error
	// UpdateOrgInfo
	UpdateOrgInfo(context.Context, *UpdateOrgInfoReq) (*UpdateOrgInfoRsp, error)
	// OperationHistory
	OperationHistory(context.Context, *OperationHistoryReq) (*OperationHistoryRsp, error)
	mustEmbedUnimplementedThorServer()
}

// UnimplementedThorServer must be embedded to have forward compatible implementations.
type UnimplementedThorServer struct {
}

func (UnimplementedThorServer) Stream(Thor_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedThorServer) Register(context.Context, *RegisterReq) (*RegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedThorServer) AddMember(context.Context, *AddMemberReq) (*AddMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedThorServer) BatchImportMember(context.Context, *BatchImportMemberReq) (*BatchImportMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchImportMember not implemented")
}
func (UnimplementedThorServer) UpdateMember(context.Context, *UpdateMemberReq) (*UpdateMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedThorServer) RemoveMember(context.Context, *RemoveMemberReq) (*RemoveMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedThorServer) TransferSuperAdmin(context.Context, *TransferSuperAdminReq) (*TransferSuperAdminRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSuperAdmin not implemented")
}
func (UnimplementedThorServer) GetMemberList(context.Context, *GetMemberListReq) (*GetMemberListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberList not implemented")
}
func (UnimplementedThorServer) GetOrgInfo(*GetOrgInfoReq, Thor_GetOrgInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOrgInfo not implemented")
}
func (UnimplementedThorServer) UpdateOrgInfo(context.Context, *UpdateOrgInfoReq) (*UpdateOrgInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgInfo not implemented")
}
func (UnimplementedThorServer) OperationHistory(context.Context, *OperationHistoryReq) (*OperationHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationHistory not implemented")
}
func (UnimplementedThorServer) mustEmbedUnimplementedThorServer() {}

// UnsafeThorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThorServer will
// result in compilation errors.
type UnsafeThorServer interface {
	mustEmbedUnimplementedThorServer()
}

func RegisterThorServer(s grpc.ServiceRegistrar, srv ThorServer) {
	s.RegisterService(&Thor_ServiceDesc, srv)
}

func _Thor_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ThorServer).Stream(&thorStreamServer{stream})
}

type Thor_StreamServer interface {
	Send(*StreamRsp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type thorStreamServer struct {
	grpc.ServerStream
}

func (x *thorStreamServer) Send(m *StreamRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *thorStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Thor_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).AddMember(ctx, req.(*AddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_BatchImportMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchImportMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).BatchImportMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_BatchImportMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).BatchImportMember(ctx, req.(*BatchImportMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).UpdateMember(ctx, req.(*UpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).RemoveMember(ctx, req.(*RemoveMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_TransferSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSuperAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).TransferSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_TransferSuperAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).TransferSuperAdmin(ctx, req.(*TransferSuperAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_GetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).GetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_GetMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).GetMemberList(ctx, req.(*GetMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_GetOrgInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOrgInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThorServer).GetOrgInfo(m, &thorGetOrgInfoServer{stream})
}

type Thor_GetOrgInfoServer interface {
	Send(*GetOrgInfoRsp) error
	grpc.ServerStream
}

type thorGetOrgInfoServer struct {
	grpc.ServerStream
}

func (x *thorGetOrgInfoServer) Send(m *GetOrgInfoRsp) error {
	return x.ServerStream.SendMsg(m)
}

func _Thor_UpdateOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).UpdateOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_UpdateOrgInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).UpdateOrgInfo(ctx, req.(*UpdateOrgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thor_OperationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThorServer).OperationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Thor_OperationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThorServer).OperationHistory(ctx, req.(*OperationHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Thor_ServiceDesc is the grpc.ServiceDesc for Thor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thor.Thor",
	HandlerType: (*ThorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Thor_Register_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Thor_AddMember_Handler,
		},
		{
			MethodName: "BatchImportMember",
			Handler:    _Thor_BatchImportMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Thor_UpdateMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Thor_RemoveMember_Handler,
		},
		{
			MethodName: "TransferSuperAdmin",
			Handler:    _Thor_TransferSuperAdmin_Handler,
		},
		{
			MethodName: "GetMemberList",
			Handler:    _Thor_GetMemberList_Handler,
		},
		{
			MethodName: "UpdateOrgInfo",
			Handler:    _Thor_UpdateOrgInfo_Handler,
		},
		{
			MethodName: "OperationHistory",
			Handler:    _Thor_OperationHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Thor_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetOrgInfo",
			Handler:       _Thor_GetOrgInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thor.proto",
}
