// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// Stream
	Stream(ctx context.Context, opts ...grpc.CallOption) (User_StreamClient, error)
	// User Register
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error)
	// get personal sign address
	GetPersonalSignAddress(ctx context.Context, in *GetPersonalSignAddressReq, opts ...grpc.CallOption) (*GetPersonalSignAddressRsp, error)
	// get vip info
	GetVIPInfo(ctx context.Context, in *GetVIPInfoReq, opts ...grpc.CallOption) (*GetVIPInfoRsp, error)
	// Get User Info
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error)
	// Get block latest timestamp
	GetLatestBlockTimestamp(ctx context.Context, in *GetLatestBlockTimestampReq, opts ...grpc.CallOption) (*GetLatestBlockTimestampRsp, error)
	// CheckTx 检测txhash是否处理完成
	CheckTx(ctx context.Context, in *CheckTxReq, opts ...grpc.CallOption) (*CheckTxRsp, error)
	// BatchCheckTx 批量查询`tx_hash`是否完成
	BatchCheckTx(ctx context.Context, in *BatchCheckTxReq, opts ...grpc.CallOption) (*BatchCheckTxRsp, error)
	// add/update one credential
	AddCredential(ctx context.Context, in *AddCredentialReq, opts ...grpc.CallOption) (*AddCredentialRsp, error)
	// BatchAddCredential batch create or update credential datas
	BatchAddCredential(ctx context.Context, in *BatchAddCredentialReq, opts ...grpc.CallOption) (*BatchAddCredentialRsp, error)
	// delete one credential
	DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*DeleteCredentialRsp, error)
	// batch delete credentials
	BatchDeleteCredential(ctx context.Context, in *BatchDeleteCredentialReq, opts ...grpc.CallOption) (*BatchDeleteCredentialRsp, error)
	// get one credential detail
	GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialRsp, error)
	// delete all user credential
	DeleteAllCredential(ctx context.Context, in *DeleteAllCredentialReq, opts ...grpc.CallOption) (*DeleteAllCredentialRsp, error)
	// get all credential timestamp
	GetAllCredentialTimestamp(ctx context.Context, in *GetAllCredentialTimestampReq, opts ...grpc.CallOption) (*GetAllCredentialTimestampRsp, error)
	// get all credential list
	GetCredentialList(ctx context.Context, in *GetCredentialListReq, opts ...grpc.CallOption) (*GetCredentialListRsp, error)
	Initialize(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error)
	GetVersionDesc(ctx context.Context, in *GetVersionDescReq, opts ...grpc.CallOption) (*GetVersionDescRsp, error)
	StorageReport(ctx context.Context, in *StorageReportReq, opts ...grpc.CallOption) (*StorageReportRsp, error)
	StorageStat(ctx context.Context, in *StorageStatReq, opts ...grpc.CallOption) (*StorageStatRsp, error)
	// AdminRegister admin register
	AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterRsp, error)
	// AdminAddMember
	AdminAddMember(ctx context.Context, in *AdminAddMemberReq, opts ...grpc.CallOption) (*AdminAddMemberRsp, error)
	// AdminBatchImportMember
	AdminBatchImportMember(ctx context.Context, in *AdminBatchImportMemberReq, opts ...grpc.CallOption) (*AdminBatchImportMemberRsp, error)
	// AdminUpdateMember
	AdminUpdateMember(ctx context.Context, in *AdminUpdateMemberReq, opts ...grpc.CallOption) (*AdminUpdateMemberRsp, error)
	// AdminRemoveMember
	AdminRemoveMember(ctx context.Context, in *AdminRemoveMemberReq, opts ...grpc.CallOption) (*AdminRemoveMemberRsp, error)
	// AdminTransferSuperAdmin
	AdminTransferSuperAdmin(ctx context.Context, in *AdminTransferSuperAdminReq, opts ...grpc.CallOption) (*AdminTransferSuperAdminRsp, error)
	// AdminGetMemberList
	AdminGetMemberList(ctx context.Context, in *AdminGetMemberListReq, opts ...grpc.CallOption) (*AdminGetMemberListRsp, error)
	// AdminGetOrgInfo
	AdminGetOrgInfo(ctx context.Context, in *AdminGetOrgInfoReq, opts ...grpc.CallOption) (*AdminGetOrgInfoRsp, error)
	// AdminUpdateOrgInfo
	AdminUpdateOrgInfo(ctx context.Context, in *AdminUpdateOrgInfoReq, opts ...grpc.CallOption) (*AdminUpdateOrgInfoRsp, error)
	// AdminOperationHistory
	AdminOperationHistory(ctx context.Context, in *AdminOperationHistoryReq, opts ...grpc.CallOption) (*AdminOperationHistoryRsp, error)
	// AdminAuthorization
	AdminAuthorization(ctx context.Context, in *AdminAuthorizationReq, opts ...grpc.CallOption) (*AdminAuthorizationRsp, error)
	// GetAdminMnemonic
	GetAdminMnemonic(ctx context.Context, in *GetAdminMnemonicReq, opts ...grpc.CallOption) (*GetAdminMnemonicRsp, error)
	// ShareFolderCreate
	ShareFolderCreate(ctx context.Context, in *ShareFolderCreateReq, opts ...grpc.CallOption) (*ShareFolderCreateRsp, error)
	// ShareFolderUpdate
	ShareFolderUpdate(ctx context.Context, in *ShareFolderUpdateReq, opts ...grpc.CallOption) (*ShareFolderUpdateRsp, error)
	// ShareFolderDestroy
	ShareFolderDestroy(ctx context.Context, in *ShareFolderDestroyReq, opts ...grpc.CallOption) (*ShareFolderDestroyRsp, error)
	// ShareFolderAddRecord
	ShareFolderAddRecord(ctx context.Context, in *ShareFolderAddRecordReq, opts ...grpc.CallOption) (*ShareFolderAddRecordRsp, error)
	// ShareFolderDeleteRecord
	ShareFolderDeleteRecord(ctx context.Context, in *ShareFolderDeleteRecordReq, opts ...grpc.CallOption) (*ShareFolderDeleteRecordRsp, error)
	// ShareFolderAddMember
	ShareFolderAddMember(ctx context.Context, in *ShareFolderAddMemberReq, opts ...grpc.CallOption) (*ShareFolderAddMemberRsp, error)
	// ShareFolderUpdateMember
	ShareFolderUpdateMember(ctx context.Context, in *ShareFolderUpdateMemberReq, opts ...grpc.CallOption) (*ShareFolderUpdateMemberRsp, error)
	// ShareFolderMemberExit
	ShareFolderMemberExit(ctx context.Context, in *ShareFolderMemberExitReq, opts ...grpc.CallOption) (*ShareFolderMemberExitRsp, error)
	// ShareFolderDeleteMember
	ShareFolderDeleteMember(ctx context.Context, in *ShareFolderDeleteMemberReq, opts ...grpc.CallOption) (*ShareFolderDeleteMemberRsp, error)
	// ShareFolderBatchUpdate
	ShareFolderBatchUpdate(ctx context.Context, in *ShareFolderBatchUpdateReq, opts ...grpc.CallOption) (*ShareFolderBatchUpdateRsp, error)
	// ShareFolderFolderList
	ShareFolderFolderList(ctx context.Context, in *ShareFolderFolderListReq, opts ...grpc.CallOption) (*ShareFolderFolderListRsp, error)
	// ShareFolderMemberList
	ShareFolderRecordList(ctx context.Context, in *ShareFolderRecordListReq, opts ...grpc.CallOption) (*ShareFolderRecordListRsp, error)
	ShareFolderRecordListByRid(ctx context.Context, in *ShareFolderRecordListByRidReq, opts ...grpc.CallOption) (*ShareFolderRecordListByRidRsp, error)
	// ShareFolderMemberList
	ShareFolderMemberList(ctx context.Context, in *ShareFolderMemberListReq, opts ...grpc.CallOption) (*ShareFolderMemberListRsp, error)
	FileUpload(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*FileUploadRsp, error)
	FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadRsp, error)
	FileAttachment(ctx context.Context, in *FileAttachmentReq, opts ...grpc.CallOption) (*FileAttachmentRsp, error)
	FileReport(ctx context.Context, in *FileReportReq, opts ...grpc.CallOption) (*FileReportRsp, error)
	GetVersionConfig(ctx context.Context, in *GetVersionConfigReq, opts ...grpc.CallOption) (*GetVersionConfigRsp, error)
	VipGetConfig(ctx context.Context, in *VipGetConfigReq, opts ...grpc.CallOption) (*VipGetConfigRsp, error)
	VipSubscriptionList(ctx context.Context, in *VipSubscriptionListReq, opts ...grpc.CallOption) (*VipSubscriptionListRsp, error)
	VipPaymentList(ctx context.Context, in *VipPaymentListReq, opts ...grpc.CallOption) (*VipPaymentListRsp, error)
	VipCreateOrder(ctx context.Context, in *VipCreateOrderReq, opts ...grpc.CallOption) (*VipCreateOrderRsp, error)
	VipCheckOrder(ctx context.Context, in *VipCheckOrderReq, opts ...grpc.CallOption) (*VipCheckOrderRsp, error)
	VipAppleVerifyReceipt(ctx context.Context, in *VipAppleVerifyReceiptReq, opts ...grpc.CallOption) (*VipAppleVerifyReceiptRsp, error)
	GetDiscountCodeInfo(ctx context.Context, in *GetDiscountCodeInfoReq, opts ...grpc.CallOption) (*GetDiscountCodeInfoRsp, error)
	GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListRsp, error)
	VipIOSPromotionSign(ctx context.Context, in *GetVipIOSPromotionSignReq, opts ...grpc.CallOption) (*GetVipIOSPromotionSignRsp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Stream(ctx context.Context, opts ...grpc.CallOption) (User_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], "/user.User/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userStreamClient{stream}
	return x, nil
}

type User_StreamClient interface {
	Send(*StreamReq) error
	Recv() (*StreamRsp, error)
	grpc.ClientStream
}

type userStreamClient struct {
	grpc.ClientStream
}

func (x *userStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userStreamClient) Recv() (*StreamRsp, error) {
	m := new(StreamRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error) {
	out := new(RegisterRsp)
	err := c.cc.Invoke(ctx, "/user.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPersonalSignAddress(ctx context.Context, in *GetPersonalSignAddressReq, opts ...grpc.CallOption) (*GetPersonalSignAddressRsp, error) {
	out := new(GetPersonalSignAddressRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetPersonalSignAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetVIPInfo(ctx context.Context, in *GetVIPInfoReq, opts ...grpc.CallOption) (*GetVIPInfoRsp, error) {
	out := new(GetVIPInfoRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetVIPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRsp, error) {
	out := new(GetUserInfoRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetLatestBlockTimestamp(ctx context.Context, in *GetLatestBlockTimestampReq, opts ...grpc.CallOption) (*GetLatestBlockTimestampRsp, error) {
	out := new(GetLatestBlockTimestampRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetLatestBlockTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckTx(ctx context.Context, in *CheckTxReq, opts ...grpc.CallOption) (*CheckTxRsp, error) {
	out := new(CheckTxRsp)
	err := c.cc.Invoke(ctx, "/user.User/CheckTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchCheckTx(ctx context.Context, in *BatchCheckTxReq, opts ...grpc.CallOption) (*BatchCheckTxRsp, error) {
	out := new(BatchCheckTxRsp)
	err := c.cc.Invoke(ctx, "/user.User/BatchCheckTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddCredential(ctx context.Context, in *AddCredentialReq, opts ...grpc.CallOption) (*AddCredentialRsp, error) {
	out := new(AddCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/AddCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchAddCredential(ctx context.Context, in *BatchAddCredentialReq, opts ...grpc.CallOption) (*BatchAddCredentialRsp, error) {
	out := new(BatchAddCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/BatchAddCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteCredential(ctx context.Context, in *DeleteCredentialReq, opts ...grpc.CallOption) (*DeleteCredentialRsp, error) {
	out := new(DeleteCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/DeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchDeleteCredential(ctx context.Context, in *BatchDeleteCredentialReq, opts ...grpc.CallOption) (*BatchDeleteCredentialRsp, error) {
	out := new(BatchDeleteCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/BatchDeleteCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*GetCredentialRsp, error) {
	out := new(GetCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteAllCredential(ctx context.Context, in *DeleteAllCredentialReq, opts ...grpc.CallOption) (*DeleteAllCredentialRsp, error) {
	out := new(DeleteAllCredentialRsp)
	err := c.cc.Invoke(ctx, "/user.User/DeleteAllCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllCredentialTimestamp(ctx context.Context, in *GetAllCredentialTimestampReq, opts ...grpc.CallOption) (*GetAllCredentialTimestampRsp, error) {
	out := new(GetAllCredentialTimestampRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetAllCredentialTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetCredentialList(ctx context.Context, in *GetCredentialListReq, opts ...grpc.CallOption) (*GetCredentialListRsp, error) {
	out := new(GetCredentialListRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetCredentialList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Initialize(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRsp, error) {
	out := new(RegisterRsp)
	err := c.cc.Invoke(ctx, "/user.User/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetVersionDesc(ctx context.Context, in *GetVersionDescReq, opts ...grpc.CallOption) (*GetVersionDescRsp, error) {
	out := new(GetVersionDescRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetVersionDesc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) StorageReport(ctx context.Context, in *StorageReportReq, opts ...grpc.CallOption) (*StorageReportRsp, error) {
	out := new(StorageReportRsp)
	err := c.cc.Invoke(ctx, "/user.User/StorageReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) StorageStat(ctx context.Context, in *StorageStatReq, opts ...grpc.CallOption) (*StorageStatRsp, error) {
	out := new(StorageStatRsp)
	err := c.cc.Invoke(ctx, "/user.User/StorageStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminRegister(ctx context.Context, in *AdminRegisterReq, opts ...grpc.CallOption) (*AdminRegisterRsp, error) {
	out := new(AdminRegisterRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminAddMember(ctx context.Context, in *AdminAddMemberReq, opts ...grpc.CallOption) (*AdminAddMemberRsp, error) {
	out := new(AdminAddMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminAddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminBatchImportMember(ctx context.Context, in *AdminBatchImportMemberReq, opts ...grpc.CallOption) (*AdminBatchImportMemberRsp, error) {
	out := new(AdminBatchImportMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminBatchImportMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminUpdateMember(ctx context.Context, in *AdminUpdateMemberReq, opts ...grpc.CallOption) (*AdminUpdateMemberRsp, error) {
	out := new(AdminUpdateMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminUpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminRemoveMember(ctx context.Context, in *AdminRemoveMemberReq, opts ...grpc.CallOption) (*AdminRemoveMemberRsp, error) {
	out := new(AdminRemoveMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminRemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminTransferSuperAdmin(ctx context.Context, in *AdminTransferSuperAdminReq, opts ...grpc.CallOption) (*AdminTransferSuperAdminRsp, error) {
	out := new(AdminTransferSuperAdminRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminTransferSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminGetMemberList(ctx context.Context, in *AdminGetMemberListReq, opts ...grpc.CallOption) (*AdminGetMemberListRsp, error) {
	out := new(AdminGetMemberListRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminGetMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminGetOrgInfo(ctx context.Context, in *AdminGetOrgInfoReq, opts ...grpc.CallOption) (*AdminGetOrgInfoRsp, error) {
	out := new(AdminGetOrgInfoRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminGetOrgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminUpdateOrgInfo(ctx context.Context, in *AdminUpdateOrgInfoReq, opts ...grpc.CallOption) (*AdminUpdateOrgInfoRsp, error) {
	out := new(AdminUpdateOrgInfoRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminUpdateOrgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminOperationHistory(ctx context.Context, in *AdminOperationHistoryReq, opts ...grpc.CallOption) (*AdminOperationHistoryRsp, error) {
	out := new(AdminOperationHistoryRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminOperationHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminAuthorization(ctx context.Context, in *AdminAuthorizationReq, opts ...grpc.CallOption) (*AdminAuthorizationRsp, error) {
	out := new(AdminAuthorizationRsp)
	err := c.cc.Invoke(ctx, "/user.User/AdminAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAdminMnemonic(ctx context.Context, in *GetAdminMnemonicReq, opts ...grpc.CallOption) (*GetAdminMnemonicRsp, error) {
	out := new(GetAdminMnemonicRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetAdminMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderCreate(ctx context.Context, in *ShareFolderCreateReq, opts ...grpc.CallOption) (*ShareFolderCreateRsp, error) {
	out := new(ShareFolderCreateRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderUpdate(ctx context.Context, in *ShareFolderUpdateReq, opts ...grpc.CallOption) (*ShareFolderUpdateRsp, error) {
	out := new(ShareFolderUpdateRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderDestroy(ctx context.Context, in *ShareFolderDestroyReq, opts ...grpc.CallOption) (*ShareFolderDestroyRsp, error) {
	out := new(ShareFolderDestroyRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderAddRecord(ctx context.Context, in *ShareFolderAddRecordReq, opts ...grpc.CallOption) (*ShareFolderAddRecordRsp, error) {
	out := new(ShareFolderAddRecordRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderAddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderDeleteRecord(ctx context.Context, in *ShareFolderDeleteRecordReq, opts ...grpc.CallOption) (*ShareFolderDeleteRecordRsp, error) {
	out := new(ShareFolderDeleteRecordRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderDeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderAddMember(ctx context.Context, in *ShareFolderAddMemberReq, opts ...grpc.CallOption) (*ShareFolderAddMemberRsp, error) {
	out := new(ShareFolderAddMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderAddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderUpdateMember(ctx context.Context, in *ShareFolderUpdateMemberReq, opts ...grpc.CallOption) (*ShareFolderUpdateMemberRsp, error) {
	out := new(ShareFolderUpdateMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderUpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderMemberExit(ctx context.Context, in *ShareFolderMemberExitReq, opts ...grpc.CallOption) (*ShareFolderMemberExitRsp, error) {
	out := new(ShareFolderMemberExitRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderMemberExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderDeleteMember(ctx context.Context, in *ShareFolderDeleteMemberReq, opts ...grpc.CallOption) (*ShareFolderDeleteMemberRsp, error) {
	out := new(ShareFolderDeleteMemberRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderDeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderBatchUpdate(ctx context.Context, in *ShareFolderBatchUpdateReq, opts ...grpc.CallOption) (*ShareFolderBatchUpdateRsp, error) {
	out := new(ShareFolderBatchUpdateRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderBatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderFolderList(ctx context.Context, in *ShareFolderFolderListReq, opts ...grpc.CallOption) (*ShareFolderFolderListRsp, error) {
	out := new(ShareFolderFolderListRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderFolderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderRecordList(ctx context.Context, in *ShareFolderRecordListReq, opts ...grpc.CallOption) (*ShareFolderRecordListRsp, error) {
	out := new(ShareFolderRecordListRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderRecordListByRid(ctx context.Context, in *ShareFolderRecordListByRidReq, opts ...grpc.CallOption) (*ShareFolderRecordListByRidRsp, error) {
	out := new(ShareFolderRecordListByRidRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderRecordListByRid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ShareFolderMemberList(ctx context.Context, in *ShareFolderMemberListReq, opts ...grpc.CallOption) (*ShareFolderMemberListRsp, error) {
	out := new(ShareFolderMemberListRsp)
	err := c.cc.Invoke(ctx, "/user.User/ShareFolderMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FileUpload(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*FileUploadRsp, error) {
	out := new(FileUploadRsp)
	err := c.cc.Invoke(ctx, "/user.User/FileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FileDownload(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*FileDownloadRsp, error) {
	out := new(FileDownloadRsp)
	err := c.cc.Invoke(ctx, "/user.User/FileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FileAttachment(ctx context.Context, in *FileAttachmentReq, opts ...grpc.CallOption) (*FileAttachmentRsp, error) {
	out := new(FileAttachmentRsp)
	err := c.cc.Invoke(ctx, "/user.User/FileAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FileReport(ctx context.Context, in *FileReportReq, opts ...grpc.CallOption) (*FileReportRsp, error) {
	out := new(FileReportRsp)
	err := c.cc.Invoke(ctx, "/user.User/FileReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetVersionConfig(ctx context.Context, in *GetVersionConfigReq, opts ...grpc.CallOption) (*GetVersionConfigRsp, error) {
	out := new(GetVersionConfigRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetVersionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipGetConfig(ctx context.Context, in *VipGetConfigReq, opts ...grpc.CallOption) (*VipGetConfigRsp, error) {
	out := new(VipGetConfigRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipGetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipSubscriptionList(ctx context.Context, in *VipSubscriptionListReq, opts ...grpc.CallOption) (*VipSubscriptionListRsp, error) {
	out := new(VipSubscriptionListRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipSubscriptionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipPaymentList(ctx context.Context, in *VipPaymentListReq, opts ...grpc.CallOption) (*VipPaymentListRsp, error) {
	out := new(VipPaymentListRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipPaymentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipCreateOrder(ctx context.Context, in *VipCreateOrderReq, opts ...grpc.CallOption) (*VipCreateOrderRsp, error) {
	out := new(VipCreateOrderRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipCreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipCheckOrder(ctx context.Context, in *VipCheckOrderReq, opts ...grpc.CallOption) (*VipCheckOrderRsp, error) {
	out := new(VipCheckOrderRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipCheckOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipAppleVerifyReceipt(ctx context.Context, in *VipAppleVerifyReceiptReq, opts ...grpc.CallOption) (*VipAppleVerifyReceiptRsp, error) {
	out := new(VipAppleVerifyReceiptRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipAppleVerifyReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetDiscountCodeInfo(ctx context.Context, in *GetDiscountCodeInfoReq, opts ...grpc.CallOption) (*GetDiscountCodeInfoRsp, error) {
	out := new(GetDiscountCodeInfoRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetDiscountCodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOrderList(ctx context.Context, in *GetOrderListReq, opts ...grpc.CallOption) (*GetOrderListRsp, error) {
	out := new(GetOrderListRsp)
	err := c.cc.Invoke(ctx, "/user.User/GetOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VipIOSPromotionSign(ctx context.Context, in *GetVipIOSPromotionSignReq, opts ...grpc.CallOption) (*GetVipIOSPromotionSignRsp, error) {
	out := new(GetVipIOSPromotionSignRsp)
	err := c.cc.Invoke(ctx, "/user.User/VipIOSPromotionSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// Stream
	Stream(User_StreamServer) error
	// User Register
	Register(context.Context, *RegisterReq) (*RegisterRsp, error)
	// get personal sign address
	GetPersonalSignAddress(context.Context, *GetPersonalSignAddressReq) (*GetPersonalSignAddressRsp, error)
	// get vip info
	GetVIPInfo(context.Context, *GetVIPInfoReq) (*GetVIPInfoRsp, error)
	// Get User Info
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error)
	// Get block latest timestamp
	GetLatestBlockTimestamp(context.Context, *GetLatestBlockTimestampReq) (*GetLatestBlockTimestampRsp, error)
	// CheckTx 检测txhash是否处理完成
	CheckTx(context.Context, *CheckTxReq) (*CheckTxRsp, error)
	// BatchCheckTx 批量查询`tx_hash`是否完成
	BatchCheckTx(context.Context, *BatchCheckTxReq) (*BatchCheckTxRsp, error)
	// add/update one credential
	AddCredential(context.Context, *AddCredentialReq) (*AddCredentialRsp, error)
	// BatchAddCredential batch create or update credential datas
	BatchAddCredential(context.Context, *BatchAddCredentialReq) (*BatchAddCredentialRsp, error)
	// delete one credential
	DeleteCredential(context.Context, *DeleteCredentialReq) (*DeleteCredentialRsp, error)
	// batch delete credentials
	BatchDeleteCredential(context.Context, *BatchDeleteCredentialReq) (*BatchDeleteCredentialRsp, error)
	// get one credential detail
	GetCredential(context.Context, *GetCredentialReq) (*GetCredentialRsp, error)
	// delete all user credential
	DeleteAllCredential(context.Context, *DeleteAllCredentialReq) (*DeleteAllCredentialRsp, error)
	// get all credential timestamp
	GetAllCredentialTimestamp(context.Context, *GetAllCredentialTimestampReq) (*GetAllCredentialTimestampRsp, error)
	// get all credential list
	GetCredentialList(context.Context, *GetCredentialListReq) (*GetCredentialListRsp, error)
	Initialize(context.Context, *RegisterReq) (*RegisterRsp, error)
	GetVersionDesc(context.Context, *GetVersionDescReq) (*GetVersionDescRsp, error)
	StorageReport(context.Context, *StorageReportReq) (*StorageReportRsp, error)
	StorageStat(context.Context, *StorageStatReq) (*StorageStatRsp, error)
	// AdminRegister admin register
	AdminRegister(context.Context, *AdminRegisterReq) (*AdminRegisterRsp, error)
	// AdminAddMember
	AdminAddMember(context.Context, *AdminAddMemberReq) (*AdminAddMemberRsp, error)
	// AdminBatchImportMember
	AdminBatchImportMember(context.Context, *AdminBatchImportMemberReq) (*AdminBatchImportMemberRsp, error)
	// AdminUpdateMember
	AdminUpdateMember(context.Context, *AdminUpdateMemberReq) (*AdminUpdateMemberRsp, error)
	// AdminRemoveMember
	AdminRemoveMember(context.Context, *AdminRemoveMemberReq) (*AdminRemoveMemberRsp, error)
	// AdminTransferSuperAdmin
	AdminTransferSuperAdmin(context.Context, *AdminTransferSuperAdminReq) (*AdminTransferSuperAdminRsp, error)
	// AdminGetMemberList
	AdminGetMemberList(context.Context, *AdminGetMemberListReq) (*AdminGetMemberListRsp, error)
	// AdminGetOrgInfo
	AdminGetOrgInfo(context.Context, *AdminGetOrgInfoReq) (*AdminGetOrgInfoRsp, error)
	// AdminUpdateOrgInfo
	AdminUpdateOrgInfo(context.Context, *AdminUpdateOrgInfoReq) (*AdminUpdateOrgInfoRsp, error)
	// AdminOperationHistory
	AdminOperationHistory(context.Context, *AdminOperationHistoryReq) (*AdminOperationHistoryRsp, error)
	// AdminAuthorization
	AdminAuthorization(context.Context, *AdminAuthorizationReq) (*AdminAuthorizationRsp, error)
	// GetAdminMnemonic
	GetAdminMnemonic(context.Context, *GetAdminMnemonicReq) (*GetAdminMnemonicRsp, error)
	// ShareFolderCreate
	ShareFolderCreate(context.Context, *ShareFolderCreateReq) (*ShareFolderCreateRsp, error)
	// ShareFolderUpdate
	ShareFolderUpdate(context.Context, *ShareFolderUpdateReq) (*ShareFolderUpdateRsp, error)
	// ShareFolderDestroy
	ShareFolderDestroy(context.Context, *ShareFolderDestroyReq) (*ShareFolderDestroyRsp, error)
	// ShareFolderAddRecord
	ShareFolderAddRecord(context.Context, *ShareFolderAddRecordReq) (*ShareFolderAddRecordRsp, error)
	// ShareFolderDeleteRecord
	ShareFolderDeleteRecord(context.Context, *ShareFolderDeleteRecordReq) (*ShareFolderDeleteRecordRsp, error)
	// ShareFolderAddMember
	ShareFolderAddMember(context.Context, *ShareFolderAddMemberReq) (*ShareFolderAddMemberRsp, error)
	// ShareFolderUpdateMember
	ShareFolderUpdateMember(context.Context, *ShareFolderUpdateMemberReq) (*ShareFolderUpdateMemberRsp, error)
	// ShareFolderMemberExit
	ShareFolderMemberExit(context.Context, *ShareFolderMemberExitReq) (*ShareFolderMemberExitRsp, error)
	// ShareFolderDeleteMember
	ShareFolderDeleteMember(context.Context, *ShareFolderDeleteMemberReq) (*ShareFolderDeleteMemberRsp, error)
	// ShareFolderBatchUpdate
	ShareFolderBatchUpdate(context.Context, *ShareFolderBatchUpdateReq) (*ShareFolderBatchUpdateRsp, error)
	// ShareFolderFolderList
	ShareFolderFolderList(context.Context, *ShareFolderFolderListReq) (*ShareFolderFolderListRsp, error)
	// ShareFolderMemberList
	ShareFolderRecordList(context.Context, *ShareFolderRecordListReq) (*ShareFolderRecordListRsp, error)
	ShareFolderRecordListByRid(context.Context, *ShareFolderRecordListByRidReq) (*ShareFolderRecordListByRidRsp, error)
	// ShareFolderMemberList
	ShareFolderMemberList(context.Context, *ShareFolderMemberListReq) (*ShareFolderMemberListRsp, error)
	FileUpload(context.Context, *FileUploadReq) (*FileUploadRsp, error)
	FileDownload(context.Context, *FileDownloadReq) (*FileDownloadRsp, error)
	FileAttachment(context.Context, *FileAttachmentReq) (*FileAttachmentRsp, error)
	FileReport(context.Context, *FileReportReq) (*FileReportRsp, error)
	GetVersionConfig(context.Context, *GetVersionConfigReq) (*GetVersionConfigRsp, error)
	VipGetConfig(context.Context, *VipGetConfigReq) (*VipGetConfigRsp, error)
	VipSubscriptionList(context.Context, *VipSubscriptionListReq) (*VipSubscriptionListRsp, error)
	VipPaymentList(context.Context, *VipPaymentListReq) (*VipPaymentListRsp, error)
	VipCreateOrder(context.Context, *VipCreateOrderReq) (*VipCreateOrderRsp, error)
	VipCheckOrder(context.Context, *VipCheckOrderReq) (*VipCheckOrderRsp, error)
	VipAppleVerifyReceipt(context.Context, *VipAppleVerifyReceiptReq) (*VipAppleVerifyReceiptRsp, error)
	GetDiscountCodeInfo(context.Context, *GetDiscountCodeInfoReq) (*GetDiscountCodeInfoRsp, error)
	GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListRsp, error)
	VipIOSPromotionSign(context.Context, *GetVipIOSPromotionSignReq) (*GetVipIOSPromotionSignRsp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Stream(User_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterReq) (*RegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) GetPersonalSignAddress(context.Context, *GetPersonalSignAddressReq) (*GetPersonalSignAddressRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalSignAddress not implemented")
}
func (UnimplementedUserServer) GetVIPInfo(context.Context, *GetVIPInfoReq) (*GetVIPInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVIPInfo not implemented")
}
func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) GetLatestBlockTimestamp(context.Context, *GetLatestBlockTimestampReq) (*GetLatestBlockTimestampRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockTimestamp not implemented")
}
func (UnimplementedUserServer) CheckTx(context.Context, *CheckTxReq) (*CheckTxRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTx not implemented")
}
func (UnimplementedUserServer) BatchCheckTx(context.Context, *BatchCheckTxReq) (*BatchCheckTxRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckTx not implemented")
}
func (UnimplementedUserServer) AddCredential(context.Context, *AddCredentialReq) (*AddCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredential not implemented")
}
func (UnimplementedUserServer) BatchAddCredential(context.Context, *BatchAddCredentialReq) (*BatchAddCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddCredential not implemented")
}
func (UnimplementedUserServer) DeleteCredential(context.Context, *DeleteCredentialReq) (*DeleteCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedUserServer) BatchDeleteCredential(context.Context, *BatchDeleteCredentialReq) (*BatchDeleteCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteCredential not implemented")
}
func (UnimplementedUserServer) GetCredential(context.Context, *GetCredentialReq) (*GetCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedUserServer) DeleteAllCredential(context.Context, *DeleteAllCredentialReq) (*DeleteAllCredentialRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllCredential not implemented")
}
func (UnimplementedUserServer) GetAllCredentialTimestamp(context.Context, *GetAllCredentialTimestampReq) (*GetAllCredentialTimestampRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCredentialTimestamp not implemented")
}
func (UnimplementedUserServer) GetCredentialList(context.Context, *GetCredentialListReq) (*GetCredentialListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialList not implemented")
}
func (UnimplementedUserServer) Initialize(context.Context, *RegisterReq) (*RegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedUserServer) GetVersionDesc(context.Context, *GetVersionDescReq) (*GetVersionDescRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionDesc not implemented")
}
func (UnimplementedUserServer) StorageReport(context.Context, *StorageReportReq) (*StorageReportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageReport not implemented")
}
func (UnimplementedUserServer) StorageStat(context.Context, *StorageStatReq) (*StorageStatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageStat not implemented")
}
func (UnimplementedUserServer) AdminRegister(context.Context, *AdminRegisterReq) (*AdminRegisterRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRegister not implemented")
}
func (UnimplementedUserServer) AdminAddMember(context.Context, *AdminAddMemberReq) (*AdminAddMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddMember not implemented")
}
func (UnimplementedUserServer) AdminBatchImportMember(context.Context, *AdminBatchImportMemberReq) (*AdminBatchImportMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBatchImportMember not implemented")
}
func (UnimplementedUserServer) AdminUpdateMember(context.Context, *AdminUpdateMemberReq) (*AdminUpdateMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateMember not implemented")
}
func (UnimplementedUserServer) AdminRemoveMember(context.Context, *AdminRemoveMemberReq) (*AdminRemoveMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRemoveMember not implemented")
}
func (UnimplementedUserServer) AdminTransferSuperAdmin(context.Context, *AdminTransferSuperAdminReq) (*AdminTransferSuperAdminRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTransferSuperAdmin not implemented")
}
func (UnimplementedUserServer) AdminGetMemberList(context.Context, *AdminGetMemberListReq) (*AdminGetMemberListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetMemberList not implemented")
}
func (UnimplementedUserServer) AdminGetOrgInfo(context.Context, *AdminGetOrgInfoReq) (*AdminGetOrgInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetOrgInfo not implemented")
}
func (UnimplementedUserServer) AdminUpdateOrgInfo(context.Context, *AdminUpdateOrgInfoReq) (*AdminUpdateOrgInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateOrgInfo not implemented")
}
func (UnimplementedUserServer) AdminOperationHistory(context.Context, *AdminOperationHistoryReq) (*AdminOperationHistoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminOperationHistory not implemented")
}
func (UnimplementedUserServer) AdminAuthorization(context.Context, *AdminAuthorizationReq) (*AdminAuthorizationRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuthorization not implemented")
}
func (UnimplementedUserServer) GetAdminMnemonic(context.Context, *GetAdminMnemonicReq) (*GetAdminMnemonicRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminMnemonic not implemented")
}
func (UnimplementedUserServer) ShareFolderCreate(context.Context, *ShareFolderCreateReq) (*ShareFolderCreateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderCreate not implemented")
}
func (UnimplementedUserServer) ShareFolderUpdate(context.Context, *ShareFolderUpdateReq) (*ShareFolderUpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderUpdate not implemented")
}
func (UnimplementedUserServer) ShareFolderDestroy(context.Context, *ShareFolderDestroyReq) (*ShareFolderDestroyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderDestroy not implemented")
}
func (UnimplementedUserServer) ShareFolderAddRecord(context.Context, *ShareFolderAddRecordReq) (*ShareFolderAddRecordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderAddRecord not implemented")
}
func (UnimplementedUserServer) ShareFolderDeleteRecord(context.Context, *ShareFolderDeleteRecordReq) (*ShareFolderDeleteRecordRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderDeleteRecord not implemented")
}
func (UnimplementedUserServer) ShareFolderAddMember(context.Context, *ShareFolderAddMemberReq) (*ShareFolderAddMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderAddMember not implemented")
}
func (UnimplementedUserServer) ShareFolderUpdateMember(context.Context, *ShareFolderUpdateMemberReq) (*ShareFolderUpdateMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderUpdateMember not implemented")
}
func (UnimplementedUserServer) ShareFolderMemberExit(context.Context, *ShareFolderMemberExitReq) (*ShareFolderMemberExitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderMemberExit not implemented")
}
func (UnimplementedUserServer) ShareFolderDeleteMember(context.Context, *ShareFolderDeleteMemberReq) (*ShareFolderDeleteMemberRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderDeleteMember not implemented")
}
func (UnimplementedUserServer) ShareFolderBatchUpdate(context.Context, *ShareFolderBatchUpdateReq) (*ShareFolderBatchUpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderBatchUpdate not implemented")
}
func (UnimplementedUserServer) ShareFolderFolderList(context.Context, *ShareFolderFolderListReq) (*ShareFolderFolderListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderFolderList not implemented")
}
func (UnimplementedUserServer) ShareFolderRecordList(context.Context, *ShareFolderRecordListReq) (*ShareFolderRecordListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderRecordList not implemented")
}
func (UnimplementedUserServer) ShareFolderRecordListByRid(context.Context, *ShareFolderRecordListByRidReq) (*ShareFolderRecordListByRidRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderRecordListByRid not implemented")
}
func (UnimplementedUserServer) ShareFolderMemberList(context.Context, *ShareFolderMemberListReq) (*ShareFolderMemberListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFolderMemberList not implemented")
}
func (UnimplementedUserServer) FileUpload(context.Context, *FileUploadReq) (*FileUploadRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedUserServer) FileDownload(context.Context, *FileDownloadReq) (*FileDownloadRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedUserServer) FileAttachment(context.Context, *FileAttachmentReq) (*FileAttachmentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileAttachment not implemented")
}
func (UnimplementedUserServer) FileReport(context.Context, *FileReportReq) (*FileReportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileReport not implemented")
}
func (UnimplementedUserServer) GetVersionConfig(context.Context, *GetVersionConfigReq) (*GetVersionConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionConfig not implemented")
}
func (UnimplementedUserServer) VipGetConfig(context.Context, *VipGetConfigReq) (*VipGetConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipGetConfig not implemented")
}
func (UnimplementedUserServer) VipSubscriptionList(context.Context, *VipSubscriptionListReq) (*VipSubscriptionListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipSubscriptionList not implemented")
}
func (UnimplementedUserServer) VipPaymentList(context.Context, *VipPaymentListReq) (*VipPaymentListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipPaymentList not implemented")
}
func (UnimplementedUserServer) VipCreateOrder(context.Context, *VipCreateOrderReq) (*VipCreateOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipCreateOrder not implemented")
}
func (UnimplementedUserServer) VipCheckOrder(context.Context, *VipCheckOrderReq) (*VipCheckOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipCheckOrder not implemented")
}
func (UnimplementedUserServer) VipAppleVerifyReceipt(context.Context, *VipAppleVerifyReceiptReq) (*VipAppleVerifyReceiptRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipAppleVerifyReceipt not implemented")
}
func (UnimplementedUserServer) GetDiscountCodeInfo(context.Context, *GetDiscountCodeInfoReq) (*GetDiscountCodeInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountCodeInfo not implemented")
}
func (UnimplementedUserServer) GetOrderList(context.Context, *GetOrderListReq) (*GetOrderListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedUserServer) VipIOSPromotionSign(context.Context, *GetVipIOSPromotionSignReq) (*GetVipIOSPromotionSignRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VipIOSPromotionSign not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).Stream(&userStreamServer{stream})
}

type User_StreamServer interface {
	Send(*StreamRsp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type userStreamServer struct {
	grpc.ServerStream
}

func (x *userStreamServer) Send(m *StreamRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPersonalSignAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalSignAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPersonalSignAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPersonalSignAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPersonalSignAddress(ctx, req.(*GetPersonalSignAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetVIPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVIPInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetVIPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetVIPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetVIPInfo(ctx, req.(*GetVIPInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetLatestBlockTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockTimestampReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetLatestBlockTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetLatestBlockTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetLatestBlockTimestamp(ctx, req.(*GetLatestBlockTimestampReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CheckTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckTx(ctx, req.(*CheckTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchCheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchCheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BatchCheckTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchCheckTx(ctx, req.(*BatchCheckTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddCredential(ctx, req.(*AddCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchAddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchAddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BatchAddCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchAddCredential(ctx, req.(*BatchAddCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteCredential(ctx, req.(*DeleteCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchDeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BatchDeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BatchDeleteCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BatchDeleteCredential(ctx, req.(*BatchDeleteCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCredential(ctx, req.(*GetCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteAllCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteAllCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteAllCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteAllCredential(ctx, req.(*DeleteAllCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllCredentialTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCredentialTimestampReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllCredentialTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAllCredentialTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllCredentialTimestamp(ctx, req.(*GetAllCredentialTimestampReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetCredentialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetCredentialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetCredentialList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetCredentialList(ctx, req.(*GetCredentialListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Initialize(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetVersionDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionDescReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetVersionDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetVersionDesc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetVersionDesc(ctx, req.(*GetVersionDescReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_StorageReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).StorageReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/StorageReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).StorageReport(ctx, req.(*StorageReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_StorageStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).StorageStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/StorageStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).StorageStat(ctx, req.(*StorageStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminRegister(ctx, req.(*AdminRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminAddMember(ctx, req.(*AdminAddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminBatchImportMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminBatchImportMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminBatchImportMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminBatchImportMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminBatchImportMember(ctx, req.(*AdminBatchImportMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminUpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminUpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminUpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminUpdateMember(ctx, req.(*AdminUpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminRemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRemoveMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminRemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminRemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminRemoveMember(ctx, req.(*AdminRemoveMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminTransferSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminTransferSuperAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminTransferSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminTransferSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminTransferSuperAdmin(ctx, req.(*AdminTransferSuperAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminGetMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminGetMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminGetMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminGetMemberList(ctx, req.(*AdminGetMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminGetOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetOrgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminGetOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminGetOrgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminGetOrgInfo(ctx, req.(*AdminGetOrgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminUpdateOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateOrgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminUpdateOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminUpdateOrgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminUpdateOrgInfo(ctx, req.(*AdminUpdateOrgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminOperationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOperationHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminOperationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminOperationHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminOperationHistory(ctx, req.(*AdminOperationHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthorizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminAuthorization(ctx, req.(*AdminAuthorizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAdminMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminMnemonicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAdminMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAdminMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAdminMnemonic(ctx, req.(*GetAdminMnemonicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderCreate(ctx, req.(*ShareFolderCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderUpdate(ctx, req.(*ShareFolderUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderDestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderDestroy(ctx, req.(*ShareFolderDestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderAddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderAddRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderAddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderAddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderAddRecord(ctx, req.(*ShareFolderAddRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderDeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderDeleteRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderDeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderDeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderDeleteRecord(ctx, req.(*ShareFolderDeleteRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderAddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderAddMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderAddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderAddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderAddMember(ctx, req.(*ShareFolderAddMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderUpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderUpdateMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderUpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderUpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderUpdateMember(ctx, req.(*ShareFolderUpdateMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderMemberExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderMemberExitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderMemberExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderMemberExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderMemberExit(ctx, req.(*ShareFolderMemberExitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderDeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderDeleteMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderDeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderDeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderDeleteMember(ctx, req.(*ShareFolderDeleteMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderBatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderBatchUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderBatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderBatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderBatchUpdate(ctx, req.(*ShareFolderBatchUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderFolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderFolderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderFolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderFolderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderFolderList(ctx, req.(*ShareFolderFolderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderRecordList(ctx, req.(*ShareFolderRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderRecordListByRid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderRecordListByRidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderRecordListByRid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderRecordListByRid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderRecordListByRid(ctx, req.(*ShareFolderRecordListByRidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ShareFolderMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareFolderMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ShareFolderMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ShareFolderMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ShareFolderMemberList(ctx, req.(*ShareFolderMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FileUpload(ctx, req.(*FileUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FileDownload(ctx, req.(*FileDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FileAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAttachmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FileAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FileAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FileAttachment(ctx, req.(*FileAttachmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FileReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FileReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/FileReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FileReport(ctx, req.(*FileReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetVersionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetVersionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetVersionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetVersionConfig(ctx, req.(*GetVersionConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipGetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipGetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipGetConfig(ctx, req.(*VipGetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipSubscriptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipSubscriptionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipSubscriptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipSubscriptionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipSubscriptionList(ctx, req.(*VipSubscriptionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipPaymentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipPaymentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipPaymentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipPaymentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipPaymentList(ctx, req.(*VipPaymentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipCreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipCreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipCreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipCreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipCreateOrder(ctx, req.(*VipCreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipCheckOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipCheckOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipCheckOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipCheckOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipCheckOrder(ctx, req.(*VipCheckOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipAppleVerifyReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VipAppleVerifyReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipAppleVerifyReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipAppleVerifyReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipAppleVerifyReceipt(ctx, req.(*VipAppleVerifyReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetDiscountCodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountCodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetDiscountCodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetDiscountCodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetDiscountCodeInfo(ctx, req.(*GetDiscountCodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOrderList(ctx, req.(*GetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VipIOSPromotionSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipIOSPromotionSignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VipIOSPromotionSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/VipIOSPromotionSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VipIOSPromotionSign(ctx, req.(*GetVipIOSPromotionSignReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "GetPersonalSignAddress",
			Handler:    _User_GetPersonalSignAddress_Handler,
		},
		{
			MethodName: "GetVIPInfo",
			Handler:    _User_GetVIPInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "GetLatestBlockTimestamp",
			Handler:    _User_GetLatestBlockTimestamp_Handler,
		},
		{
			MethodName: "CheckTx",
			Handler:    _User_CheckTx_Handler,
		},
		{
			MethodName: "BatchCheckTx",
			Handler:    _User_BatchCheckTx_Handler,
		},
		{
			MethodName: "AddCredential",
			Handler:    _User_AddCredential_Handler,
		},
		{
			MethodName: "BatchAddCredential",
			Handler:    _User_BatchAddCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _User_DeleteCredential_Handler,
		},
		{
			MethodName: "BatchDeleteCredential",
			Handler:    _User_BatchDeleteCredential_Handler,
		},
		{
			MethodName: "GetCredential",
			Handler:    _User_GetCredential_Handler,
		},
		{
			MethodName: "DeleteAllCredential",
			Handler:    _User_DeleteAllCredential_Handler,
		},
		{
			MethodName: "GetAllCredentialTimestamp",
			Handler:    _User_GetAllCredentialTimestamp_Handler,
		},
		{
			MethodName: "GetCredentialList",
			Handler:    _User_GetCredentialList_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _User_Initialize_Handler,
		},
		{
			MethodName: "GetVersionDesc",
			Handler:    _User_GetVersionDesc_Handler,
		},
		{
			MethodName: "StorageReport",
			Handler:    _User_StorageReport_Handler,
		},
		{
			MethodName: "StorageStat",
			Handler:    _User_StorageStat_Handler,
		},
		{
			MethodName: "AdminRegister",
			Handler:    _User_AdminRegister_Handler,
		},
		{
			MethodName: "AdminAddMember",
			Handler:    _User_AdminAddMember_Handler,
		},
		{
			MethodName: "AdminBatchImportMember",
			Handler:    _User_AdminBatchImportMember_Handler,
		},
		{
			MethodName: "AdminUpdateMember",
			Handler:    _User_AdminUpdateMember_Handler,
		},
		{
			MethodName: "AdminRemoveMember",
			Handler:    _User_AdminRemoveMember_Handler,
		},
		{
			MethodName: "AdminTransferSuperAdmin",
			Handler:    _User_AdminTransferSuperAdmin_Handler,
		},
		{
			MethodName: "AdminGetMemberList",
			Handler:    _User_AdminGetMemberList_Handler,
		},
		{
			MethodName: "AdminGetOrgInfo",
			Handler:    _User_AdminGetOrgInfo_Handler,
		},
		{
			MethodName: "AdminUpdateOrgInfo",
			Handler:    _User_AdminUpdateOrgInfo_Handler,
		},
		{
			MethodName: "AdminOperationHistory",
			Handler:    _User_AdminOperationHistory_Handler,
		},
		{
			MethodName: "AdminAuthorization",
			Handler:    _User_AdminAuthorization_Handler,
		},
		{
			MethodName: "GetAdminMnemonic",
			Handler:    _User_GetAdminMnemonic_Handler,
		},
		{
			MethodName: "ShareFolderCreate",
			Handler:    _User_ShareFolderCreate_Handler,
		},
		{
			MethodName: "ShareFolderUpdate",
			Handler:    _User_ShareFolderUpdate_Handler,
		},
		{
			MethodName: "ShareFolderDestroy",
			Handler:    _User_ShareFolderDestroy_Handler,
		},
		{
			MethodName: "ShareFolderAddRecord",
			Handler:    _User_ShareFolderAddRecord_Handler,
		},
		{
			MethodName: "ShareFolderDeleteRecord",
			Handler:    _User_ShareFolderDeleteRecord_Handler,
		},
		{
			MethodName: "ShareFolderAddMember",
			Handler:    _User_ShareFolderAddMember_Handler,
		},
		{
			MethodName: "ShareFolderUpdateMember",
			Handler:    _User_ShareFolderUpdateMember_Handler,
		},
		{
			MethodName: "ShareFolderMemberExit",
			Handler:    _User_ShareFolderMemberExit_Handler,
		},
		{
			MethodName: "ShareFolderDeleteMember",
			Handler:    _User_ShareFolderDeleteMember_Handler,
		},
		{
			MethodName: "ShareFolderBatchUpdate",
			Handler:    _User_ShareFolderBatchUpdate_Handler,
		},
		{
			MethodName: "ShareFolderFolderList",
			Handler:    _User_ShareFolderFolderList_Handler,
		},
		{
			MethodName: "ShareFolderRecordList",
			Handler:    _User_ShareFolderRecordList_Handler,
		},
		{
			MethodName: "ShareFolderRecordListByRid",
			Handler:    _User_ShareFolderRecordListByRid_Handler,
		},
		{
			MethodName: "ShareFolderMemberList",
			Handler:    _User_ShareFolderMemberList_Handler,
		},
		{
			MethodName: "FileUpload",
			Handler:    _User_FileUpload_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _User_FileDownload_Handler,
		},
		{
			MethodName: "FileAttachment",
			Handler:    _User_FileAttachment_Handler,
		},
		{
			MethodName: "FileReport",
			Handler:    _User_FileReport_Handler,
		},
		{
			MethodName: "GetVersionConfig",
			Handler:    _User_GetVersionConfig_Handler,
		},
		{
			MethodName: "VipGetConfig",
			Handler:    _User_VipGetConfig_Handler,
		},
		{
			MethodName: "VipSubscriptionList",
			Handler:    _User_VipSubscriptionList_Handler,
		},
		{
			MethodName: "VipPaymentList",
			Handler:    _User_VipPaymentList_Handler,
		},
		{
			MethodName: "VipCreateOrder",
			Handler:    _User_VipCreateOrder_Handler,
		},
		{
			MethodName: "VipCheckOrder",
			Handler:    _User_VipCheckOrder_Handler,
		},
		{
			MethodName: "VipAppleVerifyReceipt",
			Handler:    _User_VipAppleVerifyReceipt_Handler,
		},
		{
			MethodName: "GetDiscountCodeInfo",
			Handler:    _User_GetDiscountCodeInfo_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _User_GetOrderList_Handler,
		},
		{
			MethodName: "VipIOSPromotionSign",
			Handler:    _User_VipIOSPromotionSign_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _User_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
